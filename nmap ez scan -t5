#!/bin/bash

# Colors for output formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Banner function
display_banner() {
    echo -e "${GREEN}"
    echo "███╗   ██╗███╗   ███╗ █████╗ ██████╗     ███████╗███████╗    ███████╗ ██████╗ █████╗ ███╗   ██╗"
    echo "████╗  ██║████╗ ████║██╔══██╗██╔══██╗    ██╔════╝╚══███╔╝    ██╔════╝██╔════╝██╔══██╗████╗  ██║"
    echo "██╔██╗ ██║██╔████╔██║███████║██████╔╝    █████╗    ███╔╝     ███████╗██║     ███████║██╔██╗ ██║"
    echo "██║╚██╗██║██║╚██╔╝██║██╔══██║██╔═══╝     ██╔══╝   ███╔╝      ╚════██║██║     ██╔══██║██║╚██╗██║"
    echo "██║ ╚████║██║ ╚═╝ ██║██║  ██║██║         ███████╗███████╗    ███████║╚██████╗██║  ██║██║ ╚████║"
    echo "╚═╝  ╚═══╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝         ╚══════╝╚══════╝    ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝"
    echo -e "${NC}"
    echo -e "${YELLOW}Created by Roy Liles${NC}"
    echo
}

# Check if nmap is installed
check_nmap() {
    if ! command -v nmap &> /dev/null; then
        echo -e "${RED}[ERROR] Nmap is not installed. Please install it first.${NC}"
        exit 1
    fi
}

# Check if running as root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}[ERROR] Please run as root${NC}"
        exit 1
    fi
}

# Help menu
display_help() {
    echo -e "${GREEN}Usage:${NC}"
    echo "  $0 [options] target"
    echo
    echo -e "${GREEN}Options:${NC}"
    echo "  -h, --help        Display this help message"
    echo "  -q, --quick       Perform quick scan"
    echo "  -f, --full        Perform full scan"
    echo "  -p, --port        Specify port(s) to scan"
    echo "  -v, --vuln        Perform vulnerability scan"
    echo "  -o, --output      Save output to a file"
    echo "  -s,  --os          Perform OS detection scan"
    echo "  -sc, --script      Perform default script scan"
    echo "  -u,  --udp         Perform UDP scan"
    echo "  -t,   --tcp         Perform TCP SYN scan"
    echo
    echo -e "${GREEN}Example:${NC}"
    echo "  $0 -q 192.168.1.1"
    echo "  $0 -f example.com"
    echo "  $0 -p 80,443 192.168.1.1"
    echo "  $0 -s 192.168.1.1"
    echo "  $0 -sc 192.168.1.1"
    echo "  $0 -u 192.168.1.1"
    echo "  $0 -t 192.168.1.1"
    exit 0
}

# Quick scan function
quick_scan() {
    local target=$1
    echo -e "${YELLOW}[+] Performing quick scan on $target${NC}"
    nmap -Pn -T5 -F "$target"
}

# Full scan function
full_scan() {
    local target=$1
    echo -e "${YELLOW}[+] Performing full scan on $target${NC}"
    nmap -Pn -T5 -A -v "$target"
}

# Port scan function
port_scan() {
    local target=$1
    local ports=$2
    echo -e "${YELLOW}[+] Scanning ports $ports on $target${NC}"
    nmap -Pn -p "$ports" -T5 -A "$target"
}

# Vulnerability scan function
vuln_scan() {
    local target=$1
    echo -e "${YELLOW}[+] Performing vulnerability scan on $target${NC}"
    nmap -Pn -T5 --script vuln "$target"
}

# OS detection scan function
os_scan() {
    local target=$1
    echo -e "${YELLOW}[+] Performing OS detection scan on $target${NC}"
    nmap -Pn -O --osscan-guess -T5 "$target"
}

# Default Script scan function
script_scan() {
    local target=$1
    echo -e "${YELLOW}[+] Performing default script scan on $target${NC}"
    nmap-Pn -sC -sV -T5 "$target"
}

# UDP scan function
udp_scan() {
    local target=$1
    echo -e "${YELLOW}[+] Performing UDP scan on $target${NC}"
   nmap -sU --top-ports 75 -T2 -Pn -oA nmap_udp_output "$target" | tee nmap_udp_output.gnmap
}

# TCP scan function
tcp_scan() {
    local target=$1
    echo -e "${YELLOW}[+] Performing TCP scan on $target${NC}"
    nmap -Pn -sS -sV -T5 --top-ports 1000 "$target"
}

# Main script
main() {
    check_nmap
    check_root
    display_banner

    # If no arguments provided
    if [ $# -eq 0 ]; then
        display_help
    fi

    local OUTPUT_FILE=""
    local SCAN_TYPE=""
    local TARGET=""
    local PORTS=""

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                display_help
                ;;
            -q|--quick)
                SCAN_TYPE="quick"
                shift
                TARGET=$1
                ;;
            -f|--full)
                SCAN_TYPE="full"
                shift
                TARGET=$1
                ;;
            -p|--port)
                SCAN_TYPE="port"
                shift
                PORTS=$1
                shift
                TARGET=$1
                ;;
            -v|--vuln)
                SCAN_TYPE="vuln"
                shift
                TARGET=$1
                ;;
            -o|--output)
                shift
                OUTPUT_FILE=$1
                ;;
                 -s|--os)
                SCAN_TYPE="os"
                shift
                TARGET=$1
                ;;
            -o|--output)
                shift
                OUTPUT_FILE=$1
                ;;
            -sc|--script)
                SCAN_TYPE="script"
                shift
                TARGET=$1
                ;;
            -u|--udp)
                SCAN_TYPE="udp"
                shift
                TARGET=$1
                ;;
            -t|--tcp)
                SCAN_TYPE="tcp"
                shift
                TARGET=$1
                ;;
            *)
                if [ -z "$TARGET" ]; then
                    TARGET=$1
                fi
        esac
        shift
    done

    # Perform scan based on type
    if [ -n "$OUTPUT_FILE" ]; then
        case $SCAN_TYPE in
            "quick")
                quick_scan "$TARGET" | tee "$OUTPUT_FILE"
                ;;
            "full")
                full_scan "$TARGET" | tee "$OUTPUT_FILE"
                ;;
            "port")
                port_scan "$TARGET" "$PORTS" | tee "$OUTPUT_FILE"
                ;;
            "vuln")
                vuln_scan "$TARGET" | tee "$OUTPUT_FILE"
                ;;
            "os")
                os_scan "$TARGET" | tee "$OUTPUT_FILE"
                ;;
            "script")
                script_scan"$TARGET" | tee "$OUTPUT_FILE"
                ;;
            "udp")
                 udp_scan "$TARGET" | tee "$OUTPUT_FILE"
            "tcp")
                tcp_scan "$TARGET" | tee "$OUTPUT_FILE"
                ;;
            *)
                echo -e "${RED}[ERROR] Invalid scan type${NC}"
                exit 1
                ;;
        esac
    else
        case $SCAN_TYPE in
            "quick")
                quick_scan "$TARGET"
                ;;
            "full")
                full_scan "$TARGET"
                ;;
            "port")
                port_scan "$TARGET" "$PORTS"
                ;;
            "vuln")
                vuln_scan "$TARGET"
                ;;
            "os")
                os_scan "$TARGET"
                ;;
            "script")
                script_scan "$TARGET"
                ;;
            "udp")
                udp_scan "$TARGET"
                ;;
            "tcp")
                tcp_scan "$TARGET"    
            *)
                echo -e "${RED}[ERROR] Invalid scan type${NC}"
                exit 1
                ;;
        esac
    fi
}

# Execute main function
main "$@"
